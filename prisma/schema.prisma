// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id       Int       @id @default(autoincrement())
//   email    String    @unique
//   name     String?
//   articles Article[]
// }

// model Article {
//   id       Int     @id @default(autoincrement())
//   title    String
//   body     String?
//   author   User    @relation(fields: [authorId], references: [id])
//   authorId Int
// }

model User {
  id               Int             @id @default(autoincrement())
  name             String?
  age              Int
  email            String          @unique
  role             Role            @default(BASIC)
  writtenPosts     Post[]          @relation("WrittenPosts")
  favoritePosts    Post[]          @relation("FavoritePosts")
  userPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id])
  userPreferenceId Int?            @unique

  // Block level attributes
  @@unique([age, name])
  @@index([email])
}

model UserPreference {
  id           Int     @id @default(autoincrement())
  emailUpdates Boolean
  user         User?
}

model Post {
  id            Int        @id @default(autoincrement())
  title         String
  averageRating Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      Int
  favoritedBy   User?      @relation("FavoritePosts", fields: [favoritedById], references: [id])
  favoritedById Int?
  categories    Category[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

enum Role {
  BASIC
  ADMIN
}
